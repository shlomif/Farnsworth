%left ';'
%right '=' ':=' '=!=' '::-' ':-' '|||' '+=' '-=' '*=' '%=' '**=' '/=' '^='
%left '->' ':->' '=>'
%left ARRAYFETCH
#//%left '|'
%nonassoc ':'
%left '?'
%left '&&' '||' '!' '^^'
%left 'conforms'
%nonassoc '<' '>' '==' '!=' '>=' '<=' '<=>' 
%left '+' '-'
%left 'per'
%left '*' '/' '%' ' '
%right IMPLICIT
%left UMINUS
%left NAME
%right '^' '**'
%nonassoc '++' '--'
%right DECLAREVAR

%%

stma 
    : {undef}
	|   stmt						 { bless [ $_[1] ], 'Stmt' }
	|   stmt ';' stma				 { bless [ $_[1], ref($_[3]) eq "Stmt" ? @{$_[3]} : $_[3]], 'Stmt' }
	;

stmt
	:	expr						 { $_[1] }
	|   'var' NAME			%prec DECLAREVAR { bless [ $_[2] ], 'DeclareVar' }
	|   'var' NAME '=' expr	%prec DECLAREVAR { bless [ $_[2], $_[4] ], 'DeclareVar' }
	|	NAME ':=' expr				 { bless [@_[1,3]], 'UnitDef' }
	|	expr ':->' expr				 { bless [ @_[1,3] ], 'SetDisplay' }
	|   NAME '=!=' NAME              { bless [ @_[1,3] ], 'DefineDimen' }
	|   expr '|||' NAME				 { bless [ @_[1,3] ], 'DefineCombo' }
	|   if
	|   while
	;

ifstartcond :'if' '(' expr ')' {$_[3]}
			;
ifstmts : '{' stma '}' {$_[2]}
		;

if : ifstartcond ifstmts {bless [@_[1,2], undef], 'If'}
   | ifstartcond ifstmts 'else' ifstmts {bless [@_[1,2,4]], 'If'}
   ;

#for :	'for' '(' expr ';' expr ';' expr ')' '{' stmt '}'
#			{ bless [ @_[3,5,7,10] ], 'For' }
#	;

while : 'while' '(' expr ')' '{' stma '}'
			{ bless [ @_[3,6] ], 'While' }
	;

#// i hate bad syntax highlighting
#// ( ref($_[1]) eq 'Array' ? ( bless [@$_[1]], 'SubArray' ) : $_[1] )
#// this is a really messed up looking tree building, BUT it allows me to detect when someone does something like [ [ 1,2,3], 1,2,3] versus, a = [1,2,3]; [a,1,2,3]; and allows me to act appropriately

array : expr ',' array  {bless [ ( ref($_[1]) eq 'Array' ? ( bless [@{$_[1]}], 'SubArray' ) : $_[1] ), ref($_[3]) eq 'Array' ? @{$_[3]} : $_[3] ], 'Array' }
	  | expr {bless [ ( ref($_[1]) eq 'Array' ? ( bless [@{$_[1]}], 'SubArray' ) : $_[1] ) ], 'Array'}
	  | {bless [], 'Array'} #//need to do this for empty arrays
	  | ',' array  {bless [ undef, ref($_[2]) eq 'Array' ? @{$_[2]} : $_[2] ], 'Array' }
	  ;

constraint: expr #// this MIGHT have to change slightly, mostly to make it allow things like, flow, volume
		  | '...' {bless [], 'VarArg'} #// for having variable arguments
		  ;

argelement : NAME '=' expr 'isa' constraint {bless [ $_[1], $_[3], $_[5], 0], 'Argele'} #default value AND constraint 
		   | NAME 'isa' constraint          {bless [ $_[1], undef, $_[3], 0], 'Argele'} #constraint
		   | NAME '=' expr                  {bless [ $_[1], $_[3], undef, 0], 'Argele'} #default value
		   | NAME                           {bless [ $_[1], undef, undef, 0], 'Argele'}
		   | NAME 'byref' 'isa' constraint  {bless [ $_[1], undef, $_[4], 1], 'Argele'} #constraint
		   | NAME 'byref'                   {bless [ $_[1], undef, undef, 1], 'Argele'}
		   |
		   ;

arglist : argelement ',' arglist { bless [ $_[1], ref($_[3]) eq 'Arglist' ? @{$_[3]} : $_[3] ], 'Arglist' }
		| argelement {bless [ $_[1] ], 'Arglist'}
		;

number : 	NUMBER			{ bless [ $_[1] ], 'Num' }
		| 	HEXNUMBER		{ bless [ $_[1] ], 'HexNum' }
		;

assignexpr : 	expr '=' expr	{ bless [ @_[1,3] ], 'Store' }
		   ;

assignexpr2:	expr '+=' expr 	{ bless [ @_[1,3] ], 'StoreAdd' }
		   |	expr '-=' expr 	{ bless [ @_[1,3] ], 'StoreSub' }
		   |	expr '/=' expr 	{ bless [ @_[1,3] ], 'StoreDiv' }
		   |	expr '*=' expr 	{ bless [ @_[1,3] ], 'StoreMul' }
		   |	expr '%=' expr 	{ bless [ @_[1,3] ], 'StoreMod' }
		   |	expr '**=' expr	{ bless [ @_[1,3] ], 'StorePow' }
		   |	expr '^=' expr	{ bless [ @_[1,3] ], 'StorePow' }
		   ;

assigncomb: assignexpr
		  |	assignexpr2
		  ;

lambda :	'{`' arglist '`' stma '}' {bless [ @_[2,4] ], 'Lambda'} #i'm not sure how or when i'll implement these
	   ;

multexpr :	expr '*' expr	{ bless [ @_[1,3], '*'], 'Mul' }
	|   singleval singleval %prec IMPLICIT { bless [ @_[1,2], 'imp'], 'Mul' }
	|   singleval singleval expr %prec IMPLICIT { bless [bless([ @_[1,2], 'imp'], 'Mul'), $_[3], 'imp'], 'Mul' }
	|   expr ' ' expr { bless [ @_[1,3], ''], 'Mul' }
	;

logic:	expr '&&' expr	{ bless [ @_[1,3] ], 'And' }
	|	expr '||' expr	{ bless [ @_[1,3] ], 'Or' }
	|	expr '^^' expr	{ bless [ @_[1,3] ], 'Xor' }
	|	'!' singleval		{ bless [ $_[2] ], 'Not' }
	;

compare:expr '<' expr	{ bless [ @_[1,3] ], 'Lt' }
	|	expr '>' expr	{ bless [ @_[1,3] ], 'Gt' }
	|	expr '<=' expr	{ bless [ @_[1,3] ], 'Le' }
	|	expr '>=' expr	{ bless [ @_[1,3] ], 'Ge' }
	|	expr '==' expr	{ bless [ @_[1,3] ], 'Eq' }
	|	expr '<=>' expr { bless [ @_[1,3] ], 'Compare' }
	|	expr '!=' expr	{ bless [ @_[1,3] ], 'Ne' }
	;

crement: '++' singleval { bless [ $_[2] ], 'PreInc' }
	   | '--' singleval { bless [ $_[2] ], 'PreDec' }
	   | singleval '++' { bless [ $_[1] ], 'PostInc' }
	   | singleval '--' { bless [ $_[1] ], 'PostDec' }
	   ;
	   

value:	number
     |	DATE			{ bless [ $_[1] ], 'Date' }
	 |	STRING			{ bless [ $_[1] ], 'String' } #this will have to be reparsed later, just before evaluating
	 |	singleval '@' array '$' %prec ARRAYFETCH { bless [ @_[1,3] ], 'ArrayFetch' }
	 |	NAME			%prec NAME { bless [ $_[1] ], 'Fetch' }
	 |   '[' array ']'              { $_[2] } 
	 |   lambda
	 ;

parens:	'(' expr ')'	{ bless [$_[2]], 'Paren' } #do this so i can tell where parens were later, so i can rebuild everything correctly
	  ;

singleval: value
	 | parens
	 ;

exprnouminus:	singleval
	|   multexpr
        | expr '**' expr { bless [ @_[1,3] ], 'Pow' }
        | expr '^' expr  { bless [ @_[1,3] ], 'Pow' }
	|	expr '+' expr	{ bless [ @_[1,3]], 'Add' }
	|	expr '-' expr	{ bless [ @_[1,3]], 'Sub' }
	|	expr '/' expr	{ bless [ @_[1,3], '/'], 'Div' }
	|	expr 'per' expr	{ bless [ @_[1,3], 'per' ], 'Div' }
	|	expr '%' expr	{ bless [ @_[1,3] ], 'Mod' }
	|	expr 'conforms' expr	{ bless [ @_[1,3] ], 'Conforms' }
	|   expr '?' expr ':' expr { bless [@_[1,3,5]], 'Ternary' }
	|   logic
	|	compare
	|	crement
	|	NAME '::-'  expr	{ bless [ @_[1,3] ], 'SetPrefix' }
	|   NAME ':-' expr		{ bless [ @_[1,3] ], 'SetPrefixAbrv' }
	|	NAME '{' arglist '}' ':=' expr { bless [@_[1,3], (bless [$_[6]], 'Stmt')], 'FuncDef' }
	|   NAME '{' arglist '}' ':=' '{' stma '}' { bless [@_[1,3,7]], 'FuncDef' } #i really want scoping here, should i do it?
#	|   lambda #moved to singleval
	|   expr '=>' expr {bless [@_[1,3]], 'LambdaCall'}
#//	|   arrayfetchexpr '=' expr { bless [($_[1]->[0][0]), ($_[1]->[1]), $_[3]], 'ArrayStore' } #this may no longer be needed!
	|   expr '->' expr  { bless [ @_[1,3]], 'Trans' }
#	|	DATE			{ bless [ $_[1] ], 'Date' }
#	|	STRING			{ bless [ $_[1] ], 'String' } #this will have to be reparsed later, just before evaluating
	|   assigncomb
	;

expr: exprnouminus
	|   '-' expr     %prec UMINUS { bless [ $_[2] , (bless ['-1'], 'Num'), '-name'], 'Mul' } #unary -
	;
