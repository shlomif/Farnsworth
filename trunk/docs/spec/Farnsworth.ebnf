stma = (stmt
	|   stmt ";" stma)
	;

stmt = (	expr
	|   'var' NAME
	|   'var' NAME '=' expr
	|	NAME ':=' expr
	|	expr ':->' expr
	|   NAME '=!=' NAME
	|   expr '|||' NAME
	|   if
	|   while
        )
	;

ifstartcond :'if' '(' expr ')'

			;
ifstmts : '{' stma '}'
		;

if : ifstartcond ifstmts
   | ifstartcond ifstmts 'else' ifstmts
   ;

while : 'while' '(' expr ')' '{' stma '}'
	;

array : expr ',' array
	  | expr
	  | 
	  | ',' array
	  ;

constraint: expr
		  | '...' 
		  ;

argelement : NAME '=' expr 'isa' constraint
		   | NAME 'isa' constraint  
		   | NAME '=' expr     
		   | NAME
		   | NAME 'byref' 'isa' constraint
		   | NAME 'byref'
		   |
		   ;

arglist : argelement ',' arglist
		| argelement
		;

number : 	NUMBER
		| 	HEXNUMBER
		;

assignexpr : 	expr '=' expr
		   ;

assignexpr2:	expr '+=' expr
		   |	expr '-=' expr
		   |	expr '/=' expr
		   |	expr '*=' expr
		   |	expr '%=' expr
		   |	expr '**=' expr
		   |	expr '^=' expr
		   ;

assigncomb: assignexpr
		  |	assignexpr2
		  ;

lambda :	'{`' arglist '`' stma '}'
	   ;

multexpr :	expr '*' expr
	|   singleval singleval
	|   singleval singleval expr
	|   expr ' ' expr
	;

logic:	expr '&&' expr
	|	expr '||' expr
	|	expr '^^' expr
	|	'!' singleval
	;

compare:expr '<' expr
	|	expr '>' expr
	|	expr '<=' expr
	|	expr '>=' expr
	|	expr '==' expr
	|	expr '<=>' expr
	|	expr '!=' expr
	;

crement: '++' singleval
	   | '--' singleval
	   | singleval '++'
	   | singleval '--'
	   ;
	   

value:	number
     |	DATE
	 |	STRING
	 |	singleval '@' array '$'
	 |	NAME
	 |   '[' array ']'
	 |   lambda
	 ;

parens:	'(' expr ')'
	  ;

singleval: value
	 | parens
	 ;

exprnouminus:	singleval
	|   multexpr
        | expr '**' expr
        | expr '^' expr
	|	expr '+' expr
	|	expr '-' expr
	|	expr '/' expr
	|	expr 'per' expr
	|	expr '%' expr
	|	expr 'conforms' expr
	|   expr '?' expr ':' expr
	|   logic
	|	compare
	|	crement
	|	NAME '::-'  expr
	|   NAME ':-' expr
	|	NAME '{' arglist '}' ':=' expr
	|   NAME '{' arglist '}' ':=' '{' stma '}'
	|   expr '=>' expr
	|   expr '->' expr
	|   assigncomb
	;

expr: exprnouminus
	|   '-' expr
	;
