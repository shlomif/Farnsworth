%right '=' ':='
%left '->' ':->'
%nonassoc '<' '>' '==' '!=' '>=' '<=' '<=>'
%left '<<' '>>'
%left '+' '-'
%left '*' '/' '%' 'per'
%left ' '
%left '^' '**'

%{
use Data::Dumper; #boobs
my $s;		# warning - not re-entrant
my $lasttype;
%}

%%

#stma 
#    : {undef}
#	|   stmt						 { bless [ $_[1] ], 'Stmt' }
#	|   stmt ';' stma				 { bless [ $_[1], ref($_[3]) eq "Stmt" ? @{$_[3]} : $_[3]], 'Stmt' }
#	;

stmt
	:	expr						 { $_[1] }
	|	NAME '[' array ']' ':=' expr { bless [@_[1,3,6]], 'FuncDef' }
	|	NAME ':=' expr				 { bless [@_[1,3]], 'UnitDef' }
	|	expr ':->' expr				 { bless [ @_[1,3] ], 'SetDisplay' }
	;

#nosemi :	while |	for ;

#for :	'for' '(' expr ';' expr ';' expr ')' '{' stmt '}'
#			{ bless [ @_[3,5,7,10] ], 'For' }
#	;

#while : 'while' '(' expr ')' '{' stmt '}'
#			{ bless [ @_[3,6] ], 'While' }
#	;

array : expr ',' array  { bless [ $_[1], ref($_[3]) eq 'Array' ? @{$_[3]} : $_[3] ], 'Array' }
	  | expr
	  ;

isa : 'is' ' ' 'a'
	| 'isa'
	;

argelement : NAME {bless [ $_[1] ], 'Argele'}
		   | NAME isa NAME {bless [ $_[1], undef, $_[3] ], 'Argele'} #constraint
		   | NAME '=' expr {bless [$_[1], $_[3]], 'Argele'} #default value
		   | NAME isa NAME '=' expr {bless [$_[1], $_[5], $_[3]], 'Argele'} #default value AND constraint
		   ;

arglist : argelement ',' arglist { bless [ $_[1], ref($_[3]) eq 'Arglist' ? @{$_[3]} : $_[3] ], 'Arglist' }
		| argelement
		;

expr
	:	NUMBER			{ bless [ $_[1] ],   'Num' }
	|	NAME			{ bless [ $_[1] ],   'Fetch' }
	|	DATE			{ bless [ $_[1] ], 'Date' }
	|	STRING			{ bless [ $_[1] ], 'String' } #this will have to be reparsed later, just before evaluating
	|	'-' NAME        { bless [ (bless [ $_[2] ], 'Fetch') , '-1', '-name'], 'Mul' }
	|	NAME '=' expr	{ bless [ @_[1,3] ], 'Store' }
	|	NUMBER NAME     { bless [ $_[1], (bless [ $_[2] ], 'Fetch' )], 'Mul' }
	|   expr '->' expr  { bless [ @_[1,3] ], 'Trans' }
	|	expr '+' expr	{ bless [ @_[1,3]], 'Add' }
	|	expr '-' expr	{ bless [ @_[1,3]], 'Sub' }
	|	expr ' ' expr   { bless [ @_[1,3], ' '], 'Mul' }
	|	expr '*' expr	{ bless [ @_[1,3], '*'], 'Mul' }
	|	expr '/' expr	{ bless [ @_[1,3], '/'], 'Div' }
	|	expr 'per' expr	{ bless [ @_[1,3], 'per' ], 'Div' }
	|	expr '%' expr	{ bless [ @_[1,3] ], 'Mod' }
	|	expr '^' expr	{ bless [ @_[1,3] ], 'Pow' }
	|	expr '**' expr	{ bless [ @_[1,3] ], 'Pow' }
	|   expr '>>' expr  { bless [ @_[1,3] ], 'Bitreduce' }
	|   expr '<<' expr  { bless [ @_[1,3] ], 'Bitexpand' }
	|	expr '<' expr	{ bless [ @_[1,3] ], 'Lt' }
	|	expr '>' expr	{ bless [ @_[1,3] ], 'Gt' }
	|	expr '<=' expr	{ bless [ @_[1,3] ], 'Le' }
	|	expr '>=' expr	{ bless [ @_[1,3] ], 'Ge' }
	|	expr '==' expr	{ bless [ @_[1,3] ], 'Eq' }
	|	expr '<=>' expr { bless [ @_[1,3] ], 'Compare' }
	|	expr '!=' expr	{ bless [ @_[1,3] ], 'Ne' }
	|   NAME '[' array ']'         { bless [ @_[1,3] ], 'FuncCall' }
	|   '[' arglist ']'              { $_[2] }
	|	'(' expr ')'		       { bless [$_[2]], 'Paren' } #do this so i can tell where parens were later, so i can rebuild everything
	|	'{' '|' arglist '|' expr '}' {bless [ @_[2,4] ], 'Lambda'}
	|	' '  {undef}
	;
%%

sub yylex
	{
	#i THINK this isn't what i want, since whitespace is significant in a few areas
	#i'm going to instead shrink all whitespace down to no more than one space
	$s =~ s/\G\s{2,}/ /c; #don't need global?
		
	#1 while $s =~ /\G\s+/cg; #remove extra whitespace?

    #i want a complete number regex
	$s =~ /\G([+-]?(\d+(\.\d*)?|\.\d+)([Ee][-+]?\d+)?)/gc 
	      and return 'NUMBER', $1;
    $s =~ /\G(0[xX][0-9A-Fa-f])/gc and return $1;

    #token out the date
    $s =~ /\G\s*(#[^#]*#)\s*/gc and return 'DATE', $1;

    $s =~ /\G\s*("(\\"|[^"])*")\s*/gc and return 'STRING', $1;

    #i'll probably ressurect this later too
	#$s =~ /\G(do|for|elsif|else|if|print|while)\b/cg and return $1;
	
	$s =~ /\G\s*(:=|==|!=|>=|<=|->|:->|\*\*|per|isa)\s*/icg and return lc $1;
	$s =~ /\G\s*(\+|\*|-|\/|\%|\^)\s*/cg and return $1;
	$s =~ /\G\s*(\))/cg and return $1; #freaking quirky lexers!
	$s =~ /\G(\()\s*/cg and return $1;
	$s =~ /\G(\w[\w\d]*)/cg and return 'NAME', $1; #i need to handle -NAME later on when evaluating, or figure out a sane way to do it here
	$s =~ /\G\/\/.*/cg and return ''; #return nothing for C style comments
	$s =~ /\G(.)/cgs and return $1;
    return '';
	}


sub yyerror
	{
	my $pos = pos $s;
	substr($s,$pos,0) = '<###YYLEX###>';
	$s =~ s/^/### /mg;
	die "### Syntax Error \@ $pos of\n$s\n";
	}

sub parse
	{
	$lasttype=0;
	my $self = shift;
	$s = join ' ', @_;
	my $code = eval
		{ $self->new(yylex => \&yylex, yyerror => \&yyerror, yydebug => 0x1F)->YYParse };
	die $@ if $@;
	$code
	}

1;

# vim: filetype=yacc
